Scheme
(4 точки) Напишете функция (insert-before a sublist list), която вмъква елемента a преди първото срещане на подсписъка sublist в списъка list.
В случай, че такова (срещане) няма - връща #f.
Пример:

> (insert-before 'a '(1 2 3) '(1 1 2 3 4))   => (1 a 1 2 3 4)


(3 точки) Напишете функция (reduce-tree proc null-value tree), която работи върху листата на дървото tree.
Напишете фунцкия (sum-leaves tree), която намира сумата от стойностите в листата да даденото дърво.

(4 точки) Напишете функция (roller-coaster-stream n), която връща поток от този вид: (n n-1 n-2 ... 3 2 1 2 3 ... n-2 n-1 n n-1 n-2 ...).
За целта използвайте дефинициите на cons-stream, head, tail и empty-stream, които Анди е дал тук: https://github.com/Andreshk/FunctionalProgramming2017/blob/master/20171130-lecture.rkt

Пример:

> (take-stream (roller-coaster-stream 3) 7) => (3 2 1 2 3 2 1)


Haskell
(4 точки) Напишете функция sumPair list sum, която намира първата двойка числа в списъка със сума sum.
Пример:

> sumPair [0, 2, 11, 19, 90] 21       => [2 19]


(5 точки) Петък е и Крис решава да обиколи баровете в София. Напишете функция alcoholismPath :: (Int, Int) -> [(Int, Int)] -> Int, която приема координати на начална точка и списък с координати на барове, и намира най-краткия път, такъв че Крис обикаля всички барове в София и накрая се прибира вкъщи.
Понеже в пиянството си минава направо през къщи и блокове, приемаме разстоянието между две точки като правата линия между тях.
Решете задачата с пълно изчерпване.